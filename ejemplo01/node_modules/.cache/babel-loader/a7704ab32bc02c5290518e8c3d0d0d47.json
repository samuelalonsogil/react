{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samu\\\\IdeaProjects\\\\Interfaces\\\\React\\\\ejemplo01\\\\src\\\\Components\\\\ComponenteTemporizador.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ComponenteTemporizador() {\n  _s();\n\n  const [contador, setContador] = useState(0);\n  useEffect(() => {\n    /*se ejecutará cuando el componente se cambie*/\n  });\n  useEffect(() => {\n    /*se ejecutará una sola vez*/\n    const temp = setTimeout(() => setContador(contador + 1), 1000);\n    return () => clearTimeout(temp);\n  }, []);\n  useEffect(() => {\n    /*se ejecutará cuando la variable contador cambie*/\n  }, [contador]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"El contador vale: \", contador, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 12\n  }, this);\n}\n\n_s(ComponenteTemporizador, \"Oxg6F3/EZaOrQWRa4whxVi1y5zU=\");\n\n_c = ComponenteTemporizador;\n\nvar _c;\n\n$RefreshReg$(_c, \"ComponenteTemporizador\");","map":{"version":3,"sources":["C:/Users/Samu/IdeaProjects/Interfaces/React/ejemplo01/src/Components/ComponenteTemporizador.js"],"names":["useEffect","useState","ComponenteTemporizador","contador","setContador","temp","setTimeout","clearTimeout"],"mappings":";;;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;;AAEA,eAAgB,SAASC,sBAAT,GAAiC;AAAA;;AAC7C,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BH,QAAQ,CAAC,CAAD,CAAxC;AAIAD,EAAAA,SAAS,CAAE,MAAM;AACb;AACH,GAFQ,CAAT;AAIAA,EAAAA,SAAS,CAAE,MAAM;AACb;AACA,UAAMK,IAAI,GAAGC,UAAU,CAAE,MAAIF,WAAW,CAACD,QAAQ,GAAG,CAAZ,CAAjB,EAAiC,IAAjC,CAAvB;AACA,WAAO,MAAMI,YAAY,CAACF,IAAD,CAAzB;AACH,GAJQ,EAIN,EAJM,CAAT;AAMAL,EAAAA,SAAS,CAAE,MAAM;AACb;AACH,GAFQ,EAEN,CAACG,QAAD,CAFM,CAAT;AAIA,sBAAO;AAAA,qCAAwBA,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;GApBwBD,sB;;KAAAA,sB","sourcesContent":["import {useEffect, useState} from \"react\";\r\n\r\nexport default  function ComponenteTemporizador(){\r\n    const [contador, setContador] = useState(0);\r\n\r\n\r\n\r\n    useEffect( () => {\r\n        /*se ejecutará cuando el componente se cambie*/\r\n    } )\r\n\r\n    useEffect( () => {\r\n        /*se ejecutará una sola vez*/\r\n        const temp = setTimeout( ()=>setContador(contador + 1), 1000 );\r\n        return () => clearTimeout(temp);\r\n    }, [] );\r\n\r\n    useEffect( () => {\r\n        /*se ejecutará cuando la variable contador cambie*/\r\n    }, [contador] )\r\n\r\n    return <div>El contador vale: {contador} </div>;\r\n}"]},"metadata":{},"sourceType":"module"}